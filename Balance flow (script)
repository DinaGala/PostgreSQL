1.1
select user_id
    , min(transaction_datetime) as first_payment_date
from skyeng_db.payments
where status_name = 'success'
group by user_id

1.2
select distinct date_trunc('day', class_start_datetime) dt
from skyeng_db.classes
where date_trunc('year', class_start_datetime) = '2016-01-01'
order by 1

1.3
select user_id
    , date_trunc('day', transaction_datetime) as payment_date
    , sum(classes) as transaction_balance_change
from skyeng_db.payments
where status_name = 'success'
group by user_id, payment_date
order by 1

 
2. 
with first_payments as
        (
        select user_id
        , min(transaction_datetime) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id
        ),
all_dates as 
        (
        select distinct date_trunc('day', class_start_datetime) dt
        from skyeng_db.classes
        where date_trunc('year', class_start_datetime) = '2016-01-01'
        ),
payments_by_dates as 
        (select user_id
            , date_trunc('day', transaction_datetime) as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id, payment_date
        ),
all_dates_by_user as
        (
        select f.user_id, a.dt
        from first_payments f 
            join all_dates a on a.dt >= f.first_payment_date
        ), 
classes_by_dates as
        (
        select user_id
            , date_trunc('day', class_start_datetime) class_date
            , count (distinct id_class)*-1 classes
        from skyeng_db.classes
        where class_status in ('failed_by_teacher', 'success')
        group by 1, 2
        )
3. 
with first_payments as
        (
        select user_id
        , min(transaction_datetime) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id
        ),
        
all_dates as 
        (
        select distinct date_trunc('day', class_start_datetime) dt
        from skyeng_db.classes
        where date_trunc('year', class_start_datetime) = '2016-01-01'
        ),
        
payments_by_dates as 
        (select user_id
            , date_trunc('day', transaction_datetime) as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id, payment_date
        ),
        
all_dates_by_user as
        (
        select user_id, dt
        from first_payments f 
            join all_dates a on a.dt >= f.first_payment_date
        ), 
        
classes_by_dates as
        (
        select user_id
            , date_trunc('day', class_start_datetime) class_date
            , count (distinct id_class)*-1 classes
        from skyeng_db.classes
        where class_status in ('failed_by_teacher', 'success')
        group by 1, 2
        ),
        
payments_by_dates_cumsum as
        (
        select a.user_id
            , dt
            , transaction_balance_change
            , case when transaction_balance_change is not null 
                then sum (transaction_balance_change) over (partition by a.user_id order by a.dt) 
                else 0 
                end transaction_balance_change_cs
        from all_dates_by_user a 
            join payments_by_dates p on a.user_id = p.user_id and p.payment_date = a.dt 
        ), 
        
classes_by_dates_cumsum as
        (
        select a.user_id
            , dt
            , classes 
            , case when classes is not null 
                then sum (classes) over (partition by a.user_id order by dt) 
                else 0 
                end classes_cs 
        from all_dates_by_user a  
            join classes_by_dates c on a.user_id = c.user_id and a.dt = c.class_date
            ),
            
balances as 
        (
        select cd.user_id
            , cd.dt
            , transaction_balance_change
            , transaction_balance_change_cs
            , classes
            , classes_cs
            , (classes_cs + transaction_balance_change_cs) balance 
        from payments_by_dates_cumsum pd  
            join classes_by_dates_cumsum  cd  on pd.user_id = cd.user_id and pd.dt = cd.dt 
        )

3.4 Выберите топ-1000 строк из CTE balances с сортировкой по user_id и dt. Посмотрите на изменения балансов студентов. Какие вопросы стоит задать дата-инженерам и владельцам таблицы payments
select *
from balances
order by 1, 2

min 135
limit 1000

3.
with first_payments as
        (
        select user_id
        , min(date_trunc('day', transaction_datetime)) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id
        ),
        
all_dates as 
        (
        select distinct date_trunc('day', class_start_datetime)::date dt
        from skyeng_db.classes
        where date_trunc('year', class_start_datetime) = '2016-01-01'
        ),
        
payments_by_dates as 
        (
        select user_id
            , date_trunc('day', transaction_datetime)::date as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id, payment_date
        ),
        
all_dates_by_user as
        (
        select user_id, dt
        from all_dates a
            left join first_payments f on a.dt >= f.first_payment_date
        ), 
        
classes_by_dates as
        (
        select user_id
            , date_trunc('day', class_start_datetime)::date class_date
            , count (distinct id_class)*-1 classes
        from skyeng_db.classes
        where class_status in ('failed_by_teacher', 'success')
        group by 1, 2
        order by 2
        ),
        
payments_by_dates_cumsum as
        (
        select a.user_id
            , dt
            , coalesce (transaction_balance_change, 0) transaction_balance_change
            , sum (coalesce (transaction_balance_change, 0)) over (partition by a.user_id order by a.dt) transaction_balance_change_cs
        from all_dates_by_user a 
            left join payments_by_dates p on a.user_id = p.user_id and p.payment_date = a.dt 
        ), 
        
classes_by_dates_cumsum as
        (
        select a.user_id
            , dt
            , coalesce (classes, 0) classes 
            , sum (coalesce (classes, 0)) over (partition by a.user_id order by dt) classes_cs 
        from all_dates_by_user a  
           left join classes_by_dates c on a.user_id = c.user_id and a.dt = c.class_date
            ),
            
balances as 
        (
        select cd.user_id
            , cd.dt
            , transaction_balance_change
            , transaction_balance_change_cs
            , classes
            , classes_cs
            , (classes_cs + transaction_balance_change_cs) balance 
        from classes_by_dates_cumsum  cd  
             join payments_by_dates_cumsum pd  on pd.user_id = cd.user_id and pd.dt = cd.dt 
        )

-- select *
-- from balances
-- order by 1, 2
-- limit 1000

select dt
    , sum (transaction_balance_change) transaction_balance_change
    , sum (transaction_balance_change_cs) transaction_balance_change_cs
    , sum (classes) classes
    , sum (classes_cs) classes_cs
    , sum (balance) balance
from balances
group by 1 
order by 1
